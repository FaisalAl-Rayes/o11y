apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/redhat-appstudio/o11y?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch
      == "main"
    pipelinesascode.tekton.dev/task: "[.tekton/kube-linter-oci-ta.yaml]"
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: o11y
    appstudio.openshift.io/component: o11y
    pipelines.appstudio.openshift.io/type: build
  name: o11y-on-pull-request
  namespace: rhtap-o11y-tenant
spec:
  params:
  - name: dockerfile
    value: Dockerfile
  - name: git-url
    value: '{{repo_url}}'
  - name: image-expires-after
    value: 5d
  - name: output-image
    value: quay.io/redhat-user-workloads/rhtap-o11y-tenant/o11y/o11y:on-pr-{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  - name: target-branch
    value: '{{target_branch}}'
  pipelineSpec:
    finally:
    - name: show-sbom
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: show-sbom
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-show-sbom:0.1@sha256:8062d5b13b5236030407cbd620a75cb7c091f43be178eeefea58d2e3dddcaa74
        - name: kind
          value: task
        resolver: bundles
    - name: show-summary
      params:
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: git-url
        value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
      - name: image-url
        value: $(params.output-image)
      - name: build-task-status
        value: $(tasks.build-container.status)
      taskRef:
        params:
        - name: name
          value: summary
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.2@sha256:ac5b078500566c204eaa23e3aea1e2f7e003ac750514198419cb322a2eaf177a
        - name: kind
          value: task
        resolver: bundles
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - default: ""
      name: target-branch
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: Path to the source code of an application's component from where
        to build image.
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: "true"
      description: Skip optional checks, set false if you want to run optional checks
      name: skip-optional
      type: string
    - default: "false"
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Java build
      name: java
      type: string
    - default: ""
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
    - default: "true"
      description: Build a source image.
      name: build-source-image
      type: string
    - default: "true"
      description: Enable dev-package-managers in prefetch task
      name: prefetch-dev-package-managers-enabled
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: ""
      name: JAVA_COMMUNITY_DEPENDENCIES
      value: $(tasks.build-container.results.JAVA_COMMUNITY_DEPENDENCIES)
    tasks:
    - name: rpms-signature-scan
      params:
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: fail-unsigned
        value: true
      taskRef:
        params:
          - name: name
            value: rpms-signature-scan
          - name: bundle
            value: quay.io/konflux-ci/tekton-catalog/task-rpms-signature-scan:0.2@sha256:28aaf87d61078a0aeeeabcae455eda7d05c4f9b81d8995bdcf3dde95c1a7a77b
          - name: kind
            value: task
        resolver: bundles
    - name: init
      params:
      - name: image-url
        value: $(params.output-image)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      - name: skip-optional
        value: $(params.skip-optional)
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: pipelinerun-uid
        value: $(context.pipelineRun.uid)
      taskRef:
        params:
        - name: name
          value: init
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-init:0.2@sha256:07b8eb6a9533525a397c296246d3eb6ec4771b520a1bfee817ce2b7ede25c43d
        - name: kind
          value: task
        resolver: bundles
    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      - name: ociStorage
        value: "$(params.output-image).git"
      - name: ociArtifactExpiresAfter
        value: "$(params.image-expires-after)"
      runAfter:
      - init
      taskRef:
        params:
        - name: name
          value: git-clone-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:4bf48d038ff12d25bdeb5ab3e98dc2271818056f454c83d7393ebbd413028147
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: basic-auth
        workspace: git-auth
    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      - name: hermetic
        value: "$(params.hermetic)"
      - name: dev-package-managers
        value: $(params.prefetch-dev-package-managers-enabled)
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: ociStorage
        value: $(params.output-image).prefetch
      - name: ociArtifactExpiresAfter
        value: $(params.image-expires-after)
      runAfter:
      - clone-repository
      taskRef:
        params:
        - name: name
          value: prefetch-dependencies-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.1@sha256:0203960a9d15b184545d387296f9d47801feba1219083af5917c44d94329ef93
        - name: kind
          value: task
        resolver: bundles
    - name: check-and-test-prometheus-rules
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a83c92fc0a1e2c785937c6612dc8c8237818535543f00ecaf6b3b77a35f76259
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: check-and-test-all
            image: quay.io/rhobs/obsctl-reloader-rules-checker:1.0.7
            workingDir: /var/workdir/source
            script: |
              yum install -y make && \
              CMD=obsctl-reloader-rules-checker make check-and-test
        volumes:
          - name: workdir
            emptyDir: {}
    - name: yaml-lint
      runAfter:
        - clone-repository
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a83c92fc0a1e2c785937c6612dc8c8237818535543f00ecaf6b3b77a35f76259
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: yaml-lint
            image: registry.access.redhat.com/ubi9/python-39:latest
            workingDir: /var/workdir/source
            script: make install_pipenv sync_pipenv lint_yamls
        volumes:
          - name: workdir
            emptyDir: {}
    - name: run-gitlint
      params:
        - name: target-branch
          value: $(params.target-branch)
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - name: target-branch
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          # This is needed because the steps below both write to git source but execute as
          # different users by default.
          securityContext:
            runAsUser: 0
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a83c92fc0a1e2c785937c6612dc8c8237818535543f00ecaf6b3b77a35f76259
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: run-gitlint
            image: registry.access.redhat.com/ubi9/python-39:latest
            workingDir: /var/workdir/source
            script: |
              #!/bin/bash -ex
              python -m pip install gitlint
              git config --global --add safe.directory '*'
              git fetch origin "$(params.target-branch)"
              gitlint --fail-without-commits --commits "origin/$(params.target-branch)..HEAD"
        volumes:
          - name: workdir
            emptyDir: {}
    - name: run-kubelint
      runAfter:
      - clone-repository
      taskRef:
        name: kube-linter-oci-ta
      params:
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: config_file_path
        value: .kube-linter.yaml
    - name: run-go-unit-tests
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          # This is needed because the steps below both write to git source but execute as
          # different users by default.
          securityContext:
            runAsUser: 0
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a83c92fc0a1e2c785937c6612dc8c8237818535543f00ecaf6b3b77a35f76259
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: go-unit-tests
            image: registry.access.redhat.com/ubi9/go-toolset:1.21.11-9
            workingDir: /var/workdir/source
            script: |
              go get -v -t -d ./...
              go test -v ./...
        volumes:
          - name: workdir
            emptyDir: {}
    - name: test-kustomize-build
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a83c92fc0a1e2c785937c6612dc8c8237818535543f00ecaf6b3b77a35f76259
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: kustomize-build
            image: registry.access.redhat.com/ubi8/ubi:latest
            workingDir: /var/workdir/source
            script: yum install -y make && make kustomize-build
        volumes:
          - name: workdir
            emptyDir: {}
    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name: CONTEXT
        value: $(params.path-context)
      - name: HERMETIC
        value: $(params.hermetic)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.image-expires-after)
      - name: COMMIT_SHA
        value: $(tasks.clone-repository.results.commit)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      runAfter:
      - prefetch-dependencies
      taskRef:
        params:
        - name: name
          value: buildah-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-buildah-oci-ta:0.2@sha256:374069c6b90b2fd66a7f8bef1a5a224cc19d136031e67775b401f74808311848
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
    - name: build-source-image
      params:
      - name: BINARY_IMAGE
        value: $(params.output-image)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: source-build-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-source-build-oci-ta:0.1@sha256:6c120edf9905f7998ae5bc979dcca70a282bdca4397b349ac1829e9b4568a1a8
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      - input: $(params.build-source-image)
        operator: in
        values:
        - "true"
    - name: deprecated-base-image-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: deprecated-image-check
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.4@sha256:566ae0df80f8447558595a996627bf0b5482dc0eaa9fbc33b8154587aed51a05
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: clair-scan
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-clair-scan:0.2@sha256:45d1c904ee61c6c227011b0d70f5c7c8786376d2d06f4f8c9acc5e706c4b9b4c
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sast-snyk-check
      params:
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - prefetch-dependencies
      taskRef:
        params:
        - name: name
          value: sast-snyk-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check-oci-ta:0.3@sha256:d97a712f8b3369500563d2c302ae93d8cd94a5723d5047e6e9bb3a2066773086
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: clamav-scan
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-clamav-scan:0.1@sha256:106d938d52f05abd2ec53edb7e6dbf5015641386104583797bfc1fff2bc0d2af
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sbom-json-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: sbom-json-check
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.2@sha256:a8f1748144a51dbb90d140ae788a95e05d65dcdd0625efceedce2f5ae755c654
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    workspaces:
    - name: git-auth
      optional: true
  taskRunTemplate: {}
  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
