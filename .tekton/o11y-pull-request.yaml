apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  annotations:
    build.appstudio.openshift.io/repo: https://github.com/redhat-appstudio/o11y?rev={{revision}}
    build.appstudio.redhat.com/commit_sha: '{{revision}}'
    build.appstudio.redhat.com/pull_request_number: '{{pull_request_number}}'
    build.appstudio.redhat.com/target_branch: '{{target_branch}}'
    pipelinesascode.tekton.dev/max-keep-runs: "3"
    pipelinesascode.tekton.dev/on-cel-expression: event == "pull_request" && target_branch
      == "main"
    pipelinesascode.tekton.dev/task: "[.tekton/kube-linter-oci-ta.yaml]"
  creationTimestamp: null
  labels:
    appstudio.openshift.io/application: o11y
    appstudio.openshift.io/component: o11y
    pipelines.appstudio.openshift.io/type: build
  name: o11y-on-pull-request
  namespace: rhtap-o11y-tenant
spec:
  params:
  - name: dockerfile
    value: Dockerfile
  - name: git-url
    value: '{{repo_url}}'
  - name: image-expires-after
    value: 5d
  - name: output-image
    value: quay.io/redhat-user-workloads/rhtap-o11y-tenant/o11y/o11y:on-pr-{{revision}}
  - name: path-context
    value: .
  - name: revision
    value: '{{revision}}'
  - name: target-branch
    value: '{{target_branch}}'
  pipelineSpec:
    finally:
    - name: show-sbom
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      taskRef:
        params:
        - name: name
          value: show-sbom
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-show-sbom:0.1@sha256:8e0f8cad75e6f674d72a874385b69c4651afc0c9dcc59feffe0d85844687d852
        - name: kind
          value: task
        resolver: bundles
    - name: show-summary
      params:
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: git-url
        value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
      - name: image-url
        value: $(params.output-image)
      - name: build-task-status
        value: $(tasks.build-container.status)
      taskRef:
        params:
        - name: name
          value: summary
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-summary:0.2@sha256:abdf426424f1331c27be80ed98a0fbcefb8422767d1724308b9d57b37f977155
        - name: kind
          value: task
        resolver: bundles
    params:
    - description: Source Repository URL
      name: git-url
      type: string
    - default: ""
      description: Revision of the Source Repository
      name: revision
      type: string
    - default: ""
      name: target-branch
      type: string
    - description: Fully Qualified Output Image
      name: output-image
      type: string
    - default: .
      description: Path to the source code of an application's component from where
        to build image.
      name: path-context
      type: string
    - default: Dockerfile
      description: Path to the Dockerfile inside the context specified by parameter
        path-context
      name: dockerfile
      type: string
    - default: "false"
      description: Force rebuild image
      name: rebuild
      type: string
    - default: "false"
      description: Skip checks against built image
      name: skip-checks
      type: string
    - default: "true"
      description: Skip optional checks, set false if you want to run optional checks
      name: skip-optional
      type: string
    - default: "false"
      description: Execute the build with network isolation
      name: hermetic
      type: string
    - default: ""
      description: Build dependencies to be prefetched by Cachi2
      name: prefetch-input
      type: string
    - default: "false"
      description: Java build
      name: java
      type: string
    - default: ""
      description: Image tag expiration time, time values could be something like
        1h, 2d, 3w for hours, days, and weeks, respectively.
      name: image-expires-after
    - default: "true"
      description: Build a source image.
      name: build-source-image
      type: string
    - default: "true"
      description: Enable dev-package-managers in prefetch task
      name: prefetch-dev-package-managers-enabled
      type: string
    results:
    - description: ""
      name: IMAGE_URL
      value: $(tasks.build-container.results.IMAGE_URL)
    - description: ""
      name: IMAGE_DIGEST
      value: $(tasks.build-container.results.IMAGE_DIGEST)
    - description: ""
      name: CHAINS-GIT_URL
      value: $(tasks.clone-repository.results.url)
    - description: ""
      name: CHAINS-GIT_COMMIT
      value: $(tasks.clone-repository.results.commit)
    - description: ""
      name: JAVA_COMMUNITY_DEPENDENCIES
      value: $(tasks.build-container.results.JAVA_COMMUNITY_DEPENDENCIES)
    tasks:
    - name: init
      params:
      - name: image-url
        value: $(params.output-image)
      - name: rebuild
        value: $(params.rebuild)
      - name: skip-checks
        value: $(params.skip-checks)
      - name: skip-optional
        value: $(params.skip-optional)
      - name: pipelinerun-name
        value: $(context.pipelineRun.name)
      - name: pipelinerun-uid
        value: $(context.pipelineRun.uid)
      taskRef:
        params:
        - name: name
          value: init
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-init:0.2@sha256:596b7c11572bb94eb67d9ffb4375068426e2a8249ff2792ce04ad2a4bc593a63
        - name: kind
          value: task
        resolver: bundles
    - name: clone-repository
      params:
      - name: url
        value: $(params.git-url)
      - name: revision
        value: $(params.revision)
      - name: ociStorage
        value: "$(params.output-image).git"
      - name: ociArtifactExpiresAfter
        value: "$(params.image-expires-after)"
      runAfter:
      - init
      taskRef:
        params:
        - name: name
          value: git-clone-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:b03bb5e21665b17ae2f645496013a072b00f1a174024dc1ff41dc626f364c66b
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      workspaces:
      - name: basic-auth
        workspace: git-auth
    - name: prefetch-dependencies
      params:
      - name: input
        value: $(params.prefetch-input)
      - name: hermetic
        value: "$(params.hermetic)"
      - name: dev-package-managers
        value: $(params.prefetch-dev-package-managers-enabled)
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: ociStorage
        value: $(params.output-image).prefetch
      - name: ociArtifactExpiresAfter
        value: $(params.image-expires-after)
      runAfter:
      - clone-repository
      taskRef:
        params:
        - name: name
          value: prefetch-dependencies-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies-oci-ta:0.1@sha256:ad15707d97026d6d462e4c02a09e73a3cffdcdae3a91b03f39d2675d5a000d2b
        - name: kind
          value: task
        resolver: bundles
    - name: check-and-test-prometheus-rules
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: check-and-test-all
            image: quay.io/rhobs/obsctl-reloader-rules-checker:1.0.7
            workingDir: /var/workdir/source
            script: |
              yum install -y make && \
              CMD=obsctl-reloader-rules-checker make check-and-test
        volumes:
          - name: workdir
            emptyDir: {}
    - name: yaml-lint
      runAfter:
        - clone-repository
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: yaml-lint
            image: registry.access.redhat.com/ubi9/python-39:latest
            workingDir: /var/workdir/source
            script: make install_pipenv sync_pipenv lint_yamls
        volumes:
          - name: workdir
            emptyDir: {}
    - name: run-gitlint
      params:
        - name: target-branch
          value: $(params.target-branch)
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - name: target-branch
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          # This is needed because the steps below both write to git source but execute as
          # different users by default.
          securityContext:
            runAsUser: 0
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: run-gitlint
            image: registry.access.redhat.com/ubi9/python-39:latest
            workingDir: /var/workdir/source
            script: |
              #!/bin/bash -ex
              python -m pip install gitlint
              git config --global --add safe.directory '*'
              git fetch origin "$(params.target-branch)"
              gitlint --fail-without-commits --commits "origin/$(params.target-branch)..HEAD"
        volumes:
          - name: workdir
            emptyDir: {}
    - name: run-kubelint
      runAfter:
      - clone-repository
      taskRef:
        name: kube-linter-oci-ta
      params:
      - name: SOURCE_ARTIFACT
        value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      - name: config_file_path
        value: .kube-linter.yaml
    - name: run-go-unit-tests
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
          # This is needed because the steps below both write to git source but execute as
          # different users by default.
          securityContext:
            runAsUser: 0
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: go-unit-tests
            image: registry.access.redhat.com/ubi9/go-toolset:1.21.11-9
            workingDir: /var/workdir/source
            script: |
              go get -v -t -d ./...
              go test -v ./...
        volumes:
          - name: workdir
            emptyDir: {}
    - name: test-kustomize-build
      params:
        - name: SOURCE_ARTIFACT
          value: $(tasks.clone-repository.results.SOURCE_ARTIFACT)
      runAfter:
        - clone-repository
      taskSpec:
        params:
          - description: The Trusted Artifact URI pointing to the artifact with the application source code.
            name: SOURCE_ARTIFACT
            type: string
        stepTemplate:
          volumeMounts:
            - mountPath: /var/workdir
              name: workdir
        steps:
          - name: use-trusted-artifact
            image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:a390d28f69d61ab38aadf78b7c9b21ed09b79687bddae4cf1d02616bef5d7da7
            args:
              - use
              - $(params.SOURCE_ARTIFACT)=/var/workdir/source
          - name: kustomize-build
            image: registry.access.redhat.com/ubi8/ubi:latest
            workingDir: /var/workdir/source
            script: yum install -y make && make kustomize-build
        volumes:
          - name: workdir
            emptyDir: {}
    - name: build-container
      params:
      - name: IMAGE
        value: $(params.output-image)
      - name: DOCKERFILE
        value: $(params.dockerfile)
      - name: CONTEXT
        value: $(params.path-context)
      - name: HERMETIC
        value: $(params.hermetic)
      - name: PREFETCH_INPUT
        value: $(params.prefetch-input)
      - name: IMAGE_EXPIRES_AFTER
        value: $(params.image-expires-after)
      - name: COMMIT_SHA
        value: $(tasks.clone-repository.results.commit)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      runAfter:
      - prefetch-dependencies
      taskRef:
        params:
        - name: name
          value: buildah-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-buildah-oci-ta:0.2@sha256:8cef107a4ee7826c01c494df2b33b6ac46490051caf08e29f4802486bcb8cf31
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
    - name: build-source-image
      params:
      - name: BINARY_IMAGE
        value: $(params.output-image)
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: CACHI2_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.CACHI2_ARTIFACT)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: source-build-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-source-build-oci-ta:0.1@sha256:639995e4221da90f5a9fc14dacd0dba384e2a37e3a2c7aa5dafec3c2ab3f5f74
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(tasks.init.results.build)
        operator: in
        values:
        - "true"
      - input: $(params.build-source-image)
        operator: in
        values:
        - "true"
    - name: deprecated-base-image-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: deprecated-image-check
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-deprecated-image-check:0.4@sha256:1f17ef7ab9859d6e2215ef2ed532ebc15e516ba09226b8cae77907a7a8b7cedd
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: clair-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: clair-scan
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-clair-scan:0.1@sha256:b8c51079ea1110e1095c229e184e3c340120ba211a63a200e836706f5a35361c
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sast-snyk-check
      params:
      - name: SOURCE_ARTIFACT
        value: $(tasks.prefetch-dependencies.results.SOURCE_ARTIFACT)
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - prefetch-dependencies
      taskRef:
        params:
        - name: name
          value: sast-snyk-check-oci-ta
        - name: bundle
          value: quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check-oci-ta:0.2@sha256:c2f5eb19cfe6e48595368cc50907be74a7c8a375866ad16e7663df540825af6b
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: clamav-scan
      params:
      - name: image-digest
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      - name: image-url
        value: $(tasks.build-container.results.IMAGE_URL)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: clamav-scan
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-clamav-scan:0.1@sha256:3b8d3916f2b67936e9ca859e946dc1444c29729907ffbed8e5d72ef979d9efbb
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    - name: sbom-json-check
      params:
      - name: IMAGE_URL
        value: $(tasks.build-container.results.IMAGE_URL)
      - name: IMAGE_DIGEST
        value: $(tasks.build-container.results.IMAGE_DIGEST)
      runAfter:
      - build-container
      taskRef:
        params:
        - name: name
          value: sbom-json-check
        - name: bundle
          value: quay.io/redhat-appstudio-tekton-catalog/task-sbom-json-check:0.2@sha256:94af54db1f8aeef7dddaf410e4584e505ea71ab06ae7cc6ae9d0a2d6ddcb3d1b
        - name: kind
          value: task
        resolver: bundles
      when:
      - input: $(params.skip-checks)
        operator: in
        values:
        - "false"
    workspaces:
    - name: git-auth
      optional: true
  taskRunTemplate: {}
  workspaces:
  - name: git-auth
    secret:
      secretName: '{{ git_auth_secret }}'
status: {}
